#!/bin/bash

set -euo pipefail

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck source=lib/plugin.bash
. "$DIR/../lib/plugin.bash"

SENTRY_ORG=$(plugin_read_config ORG "")
if [ -z "${SENTRY_ORG}" ]; then
  echo 'Missing "org" option in the plugin'
  exit 1
fi
SENTRY_PROJECT=$(plugin_read_config PROJECT "")
if [ -z "${SENTRY_ORG}" ]; then
  echo 'Missing "project" option in the plugin'
  exit 1
fi

token_env=$(plugin_read_config AUTH_TOKEN_ENV "SENTRY_AUTH_TOKEN")
SENTRY_AUTH_TOKEN=${!token_env}
SENTRY_ENVIRONMENT=$(plugin_read_config ENVIRONMENT "production")
SOURCE_MAPS=$(plugin_read_config SOURCE_MAPS "")

echo "Creating and configuring sentry release for: $BUILDKITE_COMMIT"
docker run --rm -v $(pwd):/work --env SENTRY_ORG --env SENTRY_PROJECT --env SENTRY_AUTH_TOKEN getsentry/sentry-cli releases new $BUILDKITE_COMMIT
docker run --rm -v $(pwd):/work --env SENTRY_ORG --env SENTRY_PROJECT --env SENTRY_AUTH_TOKEN getsentry/sentry-cli releases set-commits --auto $BUILDKITE_COMMIT
docker run --rm -v $(pwd):/work --env SENTRY_ORG --env SENTRY_PROJECT --env SENTRY_AUTH_TOKEN getsentry/sentry-cli releases deploys new -e $SENTRY_ENVIRONMENT -r $BUILDKITE_COMMIT

if [[ -z "${SOURCE_MAPS}" ]]; then
  echo "Downloading source map artifacts from ${SOURCE_MAPS}"
  mkdir "source-maps-{$BUILDKITE_BUILD_ID}"
  buildkite-agent artifact download "$SOURCE_MAPS" "source-maps-{$BUILDKITE_BUILD_ID}"
  echo "Uploading source maps to release"
  docker run --rm -v $(pwd):/work --env SENTRY_ORG --env SENTRY_PROJECT --env SENTRY_AUTH_TOKEN getsentry/sentry-cli sourcemaps upload -r $BUILDKITE_COMMIT "source-maps-{$BUILDKITE_BUILD_ID}"
fi

docker run --rm -v $(pwd):/work --env SENTRY_ORG --env SENTRY_PROJECT --env SENTRY_AUTH_TOKEN getsentry/sentry-cli releases finalize $BUILDKITE_COMMIT
